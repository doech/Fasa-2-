import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

public class MainGUI {
    private Mapa mapa; //instancia de mapa para gestionar peligros
    private Usuario usuario; //instancia usuario para gestionar puntuaciones a futuro
    private JPanel mapaPanel;
    private BufferedImage mapaImage; //se utilizara una imagen como mapa para poder mostrarlo al usuario en el sitio
    private Peligro peligroSeleccionado//para seleccionar peligro a marcar como reparado
    private BufferedImage logoImage; // Para cargar el logo
   
    /**
     * constructor de la clase MainGUI
     */

    public MainGUI() {

        buttonPanel.setBackground(Color.LIGHT_GRAY); // para cambiar el color del fondo

         // Cargar el icono de la ventana
        try {
        frame.setIconImage(ImageIO.read(new File("icono_ventana.png")));
        } catch (IOException e) {
        e.printStackTrace();
        }

        try {
        logoImage = ImageIO.read(new File("logo.png")); // para poner el logo, el logo tiene que estar en el directorio correcto
        } catch (IOException e) {
        e.printStackTrace();
        }

        mapa = new Mapa(); // inicializa el mapa
        usuario = new Usuario("Juan", "juan@example.com"); // crea usuario automaticamente

        // cargar la imagen del mapa
        try {
            mapaImage = ImageIO.read(new File("mapa_zona16.png")); // Asegúrate de que la imagen esté en el directorio correcto
        } catch (IOException e) {
            e.printStackTrace();
        }

        JFrame frame = new JFrame("Gestión de Peligros");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        //panel para el mapa
        mapaPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                dibujarMapa(g); // llamar al método para dibujar el mapa
            }
        };
        mapaPanel.setPreferredSize(new Dimension(800, 400));
        frame.add(mapaPanel, BorderLayout.CENTER);

        //botones
        JPanel buttonPanel = new JPanel();
        JButton btnReportar = new JButton("Reportar Peligro");
        JButton btnMostrar = new JButton("Mostrar Peligros");
        JButton btnGuardar = new JButton("Guardar Peligros en CSV");
        JButton btnReparar = new JButton("Marcar como Reparado");
        JButton btnCalificar = new JButton("Calificar Reparación");

        buttonPanel.add(btnReportar);
        buttonPanel.add(btnMostrar);
        buttonPanel.add(btnGuardar);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        //reportar peligro
        btnReportar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String tipoPeligro = JOptionPane.showInputDialog("Ingrese el tipo de peligro:");
                String descripcionPeligro = JOptionPane.showInputDialog("Ingrese la descripción del peligro:");
                String zona = JOptionPane.showInputDialog("Ingrese la zona:");
                String calle = JOptionPane.showInputDialog("Ingrese la calle:");
                String avenida = JOptionPane.showInputDialog("Ingrese la avenida:");
                int gravedad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la gravedad (1-5):"));
                String carril = JOptionPane.showInputDialog("Ingrese el carril (izquierdo/derecho):");

                Peligro peligro = new Peligro(tipoPeligro, descripcionPeligro, latitud, longitud, gravedad, carril);
                mapa.agregarPeligro(peligro);
                usuario.agregarPuntos(10); // agrega puntos al usuario

                JOptionPane.showMessageDialog(frame, "Peligro reportado exitosamente.");
                mapaPanel.repaint();
            }
        });
    //mostrar peligros reportados
    btnMostrar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                StringBuilder peligrosList = new StringBuilder("Peligros reportados:\n");
                for (Peligro p : mapa.getPeligros()) {
                    peligrosList.append(p.getTipo()).append(" - ").append(p.getDescripcion()).append("\n");
                }
                JOptionPane.showMessageDialog(frame, peligrosList.toString());
            }
        });

    // guardar en csv
    btnGuardar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mapa.guardarPeligrosCSV("peligros.csv");
                JOptionPane.showMessageDialog(frame, "Peligros guardados en CSV.");
            }
        });
    // marcar como reparado
    btnReparar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] peligrosArray = mapa.getPeligros().stream()
                        .map(p -> p.getTipo() + " - " + p.getDescripcion())
                        .toArray(String[]::new);
                
                String peligroSeleccionadoString = (String) JOptionPane.showInputDialog(frame, "Seleccione un peligro para marcar como reparado:",
                        "Marcar como Reparado", JOptionPane.QUESTION_MESSAGE, null, peligrosArray, peligrosArray[0]);

                // Encontrar el peligro correspondiente
                for (Peligro p : mapa.getPeligros()) {
                    if ((p.getTipo() + " - " + p.getDescripcion()).equals(peligroSeleccionadoString)) {
                        peligroSeleccionado = p;
                        break;
                    }
                }

                if (peligroSeleccionado != null) {
                    peligroSeleccionado.setReparado(true);
                    JOptionPane.showMessageDialog(frame, "Peligro marcado como reparado.");
                }
            }
        });

    // calificar reparación
    btnCalificar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (peligroSeleccionado != null && peligroSeleccionado.isReparado()) {
                    int calificacion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la calificación de la reparación (1-5):"));
                    peligroSeleccionado.setCalificacionReparacion(calificacion);
                    JOptionPane.showMessageDialog(frame, "Reparación calificada con " + calificacion + " estrellas.");
                } else {
                    JOptionPane.showMessageDialog(frame, "Primero debe marcar el peligro como reparado.");
                }
            }
        });

        frame.setVisible(true); //muestra frame (ventana)
    }

    @Override
protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    // para dibujar el logo en la esquina superior izquierda
    if (logoImage != null) {
        g.drawImage(logoImage, 10, 10, 100, 50, null); // para ajustar el tamaño
    }
    dibujarMapa(g);
    }

    //metodo para implementar peligros en imagen del mapa
    private void dibujarMapa(Graphics g) {
        // dibujar la imagen del mapa
        if (mapaImage != null) {
            g.drawImage(mapaImage, 0, 0, mapaPanel.getWidth(), mapaPanel.getHeight(), null);
        }

        // Luego dibuja los peligros en el mapa
        for (Peligro p : mapa.getPeligros()) {
            // Convertir latitud y longitud a coordenadas del panel
            // Ajusta según la escala del mapa
            int x = (int) (Math.random() * mapaPanel.getWidth()); // Posición aleatoria solo para ilustrar
            int y = (int) (Math.random() * mapaPanel.getHeight()); // Posición aleatoria solo para ilustrar

            g.setColor(p.isReparado() ? Color.GREEN : Color.RED); // Verde si está reparado, rojo si no
            g.fillOval(x, y, 10, 10); // Dibujar el peligro como un círculo
        }
    }

    /**
     * Método principal para iniciar la aplicación.
     */
    public static void main(String[] args) {
        // Asegurarse de que la GUI se construya en el Event Dispatch Thread
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainGUI(); // Inicializar la GUI
            }
        });
    }
}

}
