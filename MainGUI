import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class MainGUI extends JFrame {
    private Mapa mapa;
    private JTextArea displayArea;
    private JLabel mapLabel;
    private Usuario usuarioActual;
    private List<Usuario> usuarios;

    // Constructor
    public MainGUI() {
        mapa = new Mapa();
        usuarios = new ArrayList<>();
        setTitle("Sistema de Detección de Baches y Peligros");
        setSize(1000, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel principal para el mapa
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        // Mapa como imagen grande
        mapLabel = new JLabel(new ImageIcon("mapa.png"));
        mainPanel.add(mapLabel, BorderLayout.CENTER);

        // Crear un usuario al inicio
        mostrarDialogoCrearUsuario();

        // Panel de botones en la parte inferior
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        JButton reportarButton = new JButton("Reportar Peligro");
        JButton mostrarButton = new JButton("Mostrar Peligros");
        JButton guardarCSVButton = new JButton("Guardar en CSV");
        JButton marcarReparadoButton = new JButton("Marcar como Reparado");
        JButton calificarButton = new JButton("Calificar Reparación");

        // Añadir los botones al panel de botones
        buttonPanel.add(reportarButton);
        buttonPanel.add(mostrarButton);
        buttonPanel.add(guardarCSVButton);
        buttonPanel.add(marcarReparadoButton);
        buttonPanel.add(calificarButton);

        // Añadir el panel de botones al panel principal en la parte inferior
        add(buttonPanel, BorderLayout.SOUTH);

        // Área de texto para mostrar peligros
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        add(scrollPane, BorderLayout.EAST);

        // Añadir el panel principal con el mapa
        add(mainPanel, BorderLayout.CENTER);

        // Agregar listeners para los botones
        reportarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                reportarPeligro();  // Llamamos al método para reportar peligro
            }
        });

        mostrarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarPeligros();
            }
        });

        guardarCSVButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                guardarPeligrosEnCSV();
            }
        });

        marcarReparadoButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                marcarPeligroReparado();
            }
        });

        calificarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                calificarReparacion();
            }
        });
    }

    // Método para crear un usuario
    private void mostrarDialogoCrearUsuario() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        ImageIcon logoIcon = new ImageIcon("radar.png");
        Image logoImage = logoIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
        logoIcon = new ImageIcon(logoImage);
        JLabel logoLabel = new JLabel(logoIcon);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(logoLabel, gbc);

        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.gridx = 0;
        gbc.gridy = 1;
        panel.add(new JLabel("Nombre:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField nombreField = new JTextField(15);
        panel.add(nombreField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Avenida:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField avenidaField = new JTextField(15);
        panel.add(avenidaField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Calle:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField calleField = new JTextField(15);
        panel.add(calleField, gbc);

        int result = JOptionPane.showConfirmDialog(null, panel, "Crear Usuario", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String nombre = nombreField.getText();
            String avenida = avenidaField.getText();
            String calle = calleField.getText();

            if (!nombre.isEmpty() && !avenida.isEmpty() && !calle.isEmpty()) {
                Usuario nuevoUsuario = new Usuario(nombre, avenida, calle);
                usuarios.add(nuevoUsuario);
                usuarioActual = nuevoUsuario;
                JOptionPane.showMessageDialog(null, "Usuario creado: " + nombre);
            } else {
                JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.");
            }
        }
    }

    // Método para reportar un peligro
    private void reportarPeligro() {
        // Crear un panel para el formulario de reporte de peligro
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);  // Añadir márgenes entre los componentes
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Etiqueta y campo de texto para la avenida
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Avenida:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField avenidaField = new JTextField(15);
        panel.add(avenidaField, gbc);

        // Etiqueta y campo de texto para la calle
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Calle:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField calleField = new JTextField(15);
        panel.add(calleField, gbc);

        // Etiqueta y campo de texto para la descripción del peligro
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Descripción:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        JTextField descripcionField = new JTextField(15);
        panel.add(descripcionField, gbc);

        // Mostrar el diálogo para ingresar el peligro
        int result = JOptionPane.showConfirmDialog(null, panel, "Reportar Peligro", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String avenida = avenidaField.getText();
            String calle = calleField.getText();
            String descripcion = descripcionField.getText();

            if (!avenida.isEmpty() && !calle.isEmpty() && !descripcion.isEmpty()) {
                Peligro nuevoPeligro = new Peligro(avenida, calle, descripcion);
                mapa.registrarPeligro(nuevoPeligro);
                JOptionPane.showMessageDialog(null, "Peligro registrado.");
            } else {
                JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.");
            }
        }
    }

    // Método para guardar los peligros en un archivo CSV
    private void guardarPeligrosEnCSV() {
        try (FileWriter writer = new FileWriter("peligros.csv")) {
            List<Peligro> peligros = mapa.getPeligros();
            for (Peligro peligro : peligros) {
                writer.write(peligro.getAvenida() + "," + peligro.getCalle() + "," + peligro.getDescripcion() + "," + peligro.isReparado() + "," + peligro.getCalificacion() + "\n");
            }
            JOptionPane.showMessageDialog(null, "Peligros guardados en peligros.csv.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar en CSV.");
        }
    }

    // Método para marcar un peligro como reparado
    private void marcarPeligroReparado() {
        JTextField avenidaField = new JTextField(15);
        JTextField calleField = new JTextField(15);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Avenida:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(avenidaField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Calle:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(calleField, gbc);

        int result = JOptionPane.showConfirmDialog(null, panel, "Marcar Peligro Reparado", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String avenida = avenidaField.getText();
            String calle = calleField.getText();

            mapa.marcarPeligroReparado(avenida, calle);
            JOptionPane.showMessageDialog(null, "Peligro marcado como reparado.");
        }
    }

    // Método para calificar la reparación de un peligro
    // Método para calificar la reparación de un peligro
private void calificarReparacion() {
    JTextField avenidaField = new JTextField(15);
    JTextField calleField = new JTextField(15);
    JTextField calificacionField = new JTextField(5);

    JPanel panel = new JPanel(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.EAST;
    panel.add(new JLabel("Avenida:"), gbc);

    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    panel.add(avenidaField, gbc);

    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.anchor = GridBagConstraints.EAST;
    panel.add(new JLabel("Calle:"), gbc);

    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.anchor = GridBagConstraints.WEST;
    panel.add(calleField, gbc);

    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.anchor = GridBagConstraints.EAST;
    panel.add(new JLabel("Calificación (1-10):"), gbc);

    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.anchor = GridBagConstraints.WEST;
    panel.add(calificacionField, gbc);

    int result = JOptionPane.showConfirmDialog(null, panel, "Calificar Reparación", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.OK_OPTION) {
        String avenida = avenidaField.getText();
        String calle = calleField.getText();
        int calificacion;

        try {
            calificacion = Integer.parseInt(calificacionField.getText());
            if (calificacion < 1 || calificacion > 10) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "La calificación debe ser un número entre 1 y 10.");
            return;
        }

        // Calificar el peligro en el mapa
        mapa.calificarPeligro(avenida, calle, calificacion);

        // Añadir 10 puntos al usuario por calificar la reparación
        if (usuarioActual != null) {
            usuarioActual.agregarPuntos(10);  // Añadir puntos
            JOptionPane.showMessageDialog(null, "Reparación calificada. Has ganado 10 puntos. Tus puntos actuales: " + usuarioActual.getPuntos());
        } else {
            JOptionPane.showMessageDialog(null, "Usuario no encontrado.");
        }
    }
}

// Método para mostrar los peligros registrados
private void mostrarPeligros() {
    List<Peligro> peligros = mapa.getPeligros();
    displayArea.setText("");  // Limpiar el área de texto
    if (peligros.isEmpty()) {
        displayArea.append("No hay peligros registrados.\n");
    } else {
        for (Peligro peligro : peligros) {
            displayArea.append(peligro.toString() + "\n");
        }
    }

    // Actualizar el mapa visualmente con los peligros (si es posible)
    // Si el mapa es una imagen estática, podrías considerar usar un icono o marcador para mostrar los peligros.
    mapLabel.setText("");  // Limpiar el mapa si es un JLabel (puedes ajustarlo según el tipo de componente)
    for (Peligro peligro : peligros) {
        mapLabel.setText(mapLabel.getText() + "Peligro en " + peligro.getAvenida() + " y " + peligro.getCalle() + "\n");
    }
}

// Método para mostrar los puntos del usuario actual
private void mostrarPuntosUsuario() {
    if (usuarioActual != null) {
        JOptionPane.showMessageDialog(null, "Tus puntos actuales son: " + usuarioActual.getPuntos());
    } else {
        JOptionPane.showMessageDialog(null, "Usuario no encontrado.");
    }
}



    // Método main para ejecutar la aplicación
    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
}
